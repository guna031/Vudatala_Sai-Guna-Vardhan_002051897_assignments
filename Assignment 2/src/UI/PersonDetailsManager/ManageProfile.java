/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package UI.PersonDetailsManager;

import java.awt.CardLayout;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;
import model.Person;
import model.PersonDirectory;

/**
 *
 * @author gunav
 */
public class ManageProfile extends javax.swing.JPanel {

    /**
     * Creates new form ManageProfile
     */
    
    private JPanel userProcessContainer;
    private PersonDirectory perDir;
    private Person selectedPerson;
    
    public ManageProfile(JPanel container, PersonDirectory per) {
        initComponents();
        userProcessContainer = container;
        perDir = per;
        populateTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tableProfile = new javax.swing.JTable();
        buttonBack = new javax.swing.JButton();
        buttonView = new javax.swing.JButton();
        buttonDelete = new javax.swing.JButton();
        labelManage = new javax.swing.JLabel();

        tableProfile.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "First Name", "Last Name", "Work City", "Work Zip Code", "Home City", "Home Zip Code"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, true, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tableProfile);

        buttonBack.setText("<<<<Back");
        buttonBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonBackActionPerformed(evt);
            }
        });

        buttonView.setText("View ");
        buttonView.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonViewActionPerformed(evt);
            }
        });

        buttonDelete.setText("Delete");
        buttonDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonDeleteActionPerformed(evt);
            }
        });

        labelManage.setText("Manage Profiles");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(33, 33, 33)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(buttonDelete)
                    .addComponent(buttonView)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(buttonBack)
                            .addGap(240, 240, 240)
                            .addComponent(labelManage))
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 785, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(50, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(buttonBack)
                    .addComponent(labelManage))
                .addGap(30, 30, 30)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 372, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(buttonView)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(buttonDelete)
                .addContainerGap(104, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void buttonBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonBackActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_buttonBackActionPerformed

    private void buttonViewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonViewActionPerformed
        // TODO add your handling code here:
        int selectedRow = tableProfile.getSelectedRow();
        
        if(selectedRow>=0){
        Person per = (Person) tableProfile.getValueAt(selectedRow,0);
        
        ViewJPanel viewPanel = new ViewJPanel(userProcessContainer, perDir, per);
        userProcessContainer.add("ViewJPanel", viewPanel);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.next(userProcessContainer);
            
        }
        else{
            JOptionPane.showMessageDialog(null, "select an account first to view the person details", "WARNING!!!", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_buttonViewActionPerformed

    private void buttonDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonDeleteActionPerformed
        // TODO add your handling code here:
        int selectedRow = tableProfile.getSelectedRow();
        
        if(selectedRow>=0){
            int dialogButton = JOptionPane.YES_NO_OPTION;
            int dialogResult = JOptionPane.showConfirmDialog(null, "Are you sure on deleting the selected row?", "WARNING!!!", JOptionPane.WARNING_MESSAGE);
            if (dialogButton == JOptionPane.YES_OPTION){
                Person per = (Person) tableProfile.getValueAt(selectedRow,0);
                perDir.delPerson(per);
                populateTable();
            }
        }
        
        else{
            JOptionPane.showMessageDialog(null, "Select an person that you would like to be deleted", "WARNING!!!", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_buttonDeleteActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buttonBack;
    private javax.swing.JButton buttonDelete;
    private javax.swing.JButton buttonView;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel labelManage;
    private javax.swing.JTable tableProfile;
    // End of variables declaration//GEN-END:variables
public void populateTable(){
        DefaultTableModel model = (DefaultTableModel) tableProfile.getModel();
        model.setRowCount(0);
        
        for(Person per: perDir.getPersons()){
            Object[] rows = new Object[6];
            rows[0] = per;
            rows[1] = per.getLastName();
            rows[2] = per.getWorkAdd().getCity();
            rows[3] = per.getWorkAdd().getZipcode();
            rows[4] = per.getHomeAdd().getCity();
            rows[5] = per.getHomeAdd().getZipcode();
            
           
            model.addRow(rows);
        }
    }


}
